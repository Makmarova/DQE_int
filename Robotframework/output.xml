<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.11.2 on win32)" generated="20230408 10:41:04.163" rpa="false" schemaversion="3">
<suite id="s1" name="Task" source="C:\Users\Maryia_Makarava\git\DQE_int\Robotframework\tests\task.robot">
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary" type="SETUP">
<arg>pyodbc</arg>
<arg>Driver='SQL Server', Server='EPPLWARW0047\\SQLEXPRESS', Database='TRN', Trusted_Connection='yes', UID='DQELogin', PWD='DQE2023*'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_custom_param_string`.</doc>
<msg timestamp="20230408 10:41:04.199" level="INFO">Executing : Connect To Database Using Custom Params : pyodbc.connect(db_api_2.connect(Driver='SQL Server', Server='EPPLWARW0047\SQLEXPRESS', Database='TRN', Trusted_Connection='yes', UID='DQELogin', PWD='DQE2023*')) </msg>
<status status="PASS" starttime="20230408 10:41:04.195" endtime="20230408 10:41:04.250"/>
</kw>
<test id="s1-t1" name="Table Countries. Check sum of region ids in Country table" line="22">
<kw name="Query" library="DatabaseLibrary">
<var>${output}</var>
<arg>select sum(region_id) from [hr].[countries];</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230408 10:41:04.251" level="INFO">Executing : Query  |  select sum(region_id) from [hr].[countries]; </msg>
<msg timestamp="20230408 10:41:04.253" level="INFO">${output} = [(60, )]</msg>
<status status="PASS" starttime="20230408 10:41:04.251" endtime="20230408 10:41:04.253"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230408 10:41:04.253" level="INFO">[(60, )]</msg>
<status status="PASS" starttime="20230408 10:41:04.253" endtime="20230408 10:41:04.253"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>[(60, )]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20230408 10:41:04.254" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230408 10:41:04.254" endtime="20230408 10:41:04.254"/>
</kw>
<doc>Check region_ids sum in Country table

Expected results:
The result should be ('70')</doc>
<tag>test_1.Country</tag>
<status status="PASS" starttime="20230408 10:41:04.250" endtime="20230408 10:41:04.254"/>
</test>
<test id="s1-t2" name="Table Countries. Verify that minimum country_id is 'AR'" line="33">
<kw name="Query" library="DatabaseLibrary">
<var>${output}</var>
<arg>select min (country_id) from [hr].[countries];</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230408 10:41:04.256" level="INFO">Executing : Query  |  select min (country_id) from [hr].[countries]; </msg>
<msg timestamp="20230408 10:41:04.257" level="INFO">${output} = [('AR', )]</msg>
<status status="PASS" starttime="20230408 10:41:04.255" endtime="20230408 10:41:04.257"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230408 10:41:04.258" level="INFO">[('AR', )]</msg>
<status status="PASS" starttime="20230408 10:41:04.257" endtime="20230408 10:41:04.258"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>[('AR', )]</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20230408 10:41:04.258" level="INFO">Argument types are:
&lt;class 'list'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230408 10:41:04.258" endtime="20230408 10:41:04.258"/>
</kw>
<doc>Check the minimum country_id

Expected results:
AR is a mininum country_id</doc>
<tag>test_2.Country</tag>
<status status="PASS" starttime="20230408 10:41:04.255" endtime="20230408 10:41:04.259"/>
</test>
<test id="s1-t3" name="Table Employees. Verify that there is only one employee without manager" line="45">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<arg>select count(*) from [hr].[employees] where manager_id is null;</arg>
<arg>1</arg>
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20230408 10:41:04.260" level="INFO">Executing : Row Count Is Equal To X  |  select count(*) from [hr].[employees] where manager_id is null;  |  1 </msg>
<msg timestamp="20230408 10:41:04.260" level="INFO">Executing : Row Count  |  select count(*) from [hr].[employees] where manager_id is null; </msg>
<status status="PASS" starttime="20230408 10:41:04.260" endtime="20230408 10:41:04.263"/>
</kw>
<doc>Check number of employees without manager

Expected results:
Count of employees without manager is 1</doc>
<tag>test_3.Employees</tag>
<status status="PASS" starttime="20230408 10:41:04.260" endtime="20230408 10:41:04.263"/>
</test>
<test id="s1-t4" name="Table Employees. Check the average salary for all employees" line="55">
<kw name="Query" library="DatabaseLibrary">
<var>@{AverageResult}</var>
<arg>SELECT avg(salary) as average_salary FROM [hr].[employees];</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230408 10:41:04.264" level="INFO">Executing : Query  |  SELECT avg(salary) as average_salary FROM [hr].[employees]; </msg>
<msg timestamp="20230408 10:41:04.265" level="INFO">@{AverageResult} = [ (Decimal('8060.000000'), ) ]</msg>
<status status="PASS" starttime="20230408 10:41:04.264" endtime="20230408 10:41:04.265"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>@{AverageResult}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230408 10:41:04.266" level="INFO">(Decimal('8060.000000'), )</msg>
<status status="PASS" starttime="20230408 10:41:04.266" endtime="20230408 10:41:04.266"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>@{AverageResult}</arg>
<arg>(Decimal('8060.000000'), )</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20230408 10:41:04.267" level="INFO">Argument types are:
&lt;class 'pyodbc.Row'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230408 10:41:04.267" endtime="20230408 10:41:04.267"/>
</kw>
<doc>Execute the sql quiery

Expected result:
Average value of salary for all employees should be 8060</doc>
<tag>test_4.Employees</tag>
<status status="PASS" starttime="20230408 10:41:04.263" endtime="20230408 10:41:04.267"/>
</test>
<test id="s1-t5" name="Table Jobs. Find out about the existence of the 'Sales' positions" line="67">
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<arg>select * from hr.jobs where job_title like'%Sales%';</arg>
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<msg timestamp="20230408 10:41:04.270" level="INFO">Executing : Check If Exists In Database  |  select * from hr.jobs where job_title like'%Sales%'; </msg>
<msg timestamp="20230408 10:41:04.270" level="INFO">Executing : Query  |  select * from hr.jobs where job_title like'%Sales%'; </msg>
<status status="PASS" starttime="20230408 10:41:04.270" endtime="20230408 10:41:04.270"/>
</kw>
<doc>Check that the job_title related to 'Sales' exists in the jobs table

Expected results:
Sales jobs exist in the table
If there are no results, then this will throw an AssertionError.</doc>
<tag>test_5.Jobs</tag>
<status status="PASS" starttime="20230408 10:41:04.268" endtime="20230408 10:41:04.271"/>
</test>
<test id="s1-t6" name="Table Jobs. Find out the position with maximum difference in min and max salary" line="78">
<kw name="Query" library="DatabaseLibrary">
<var>@{queryResults}</var>
<arg>SELECT TOP 1 job_title, min_salary, diff FROM (SELECT job_title, min_salary, (max_salary - min_salary) AS diff FROM [hr].[jobs]) AS job_diffs ORDER BY diff DESC;</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20230408 10:41:04.273" level="INFO">Executing : Query  |  SELECT TOP 1 job_title, min_salary, diff FROM (SELECT job_title, min_salary, (max_salary - min_salary) AS diff FROM [hr].[jobs]) AS job_diffs ORDER BY diff DESC; </msg>
<msg timestamp="20230408 10:41:04.275" level="INFO">@{queryResults} = [ ('President', Decimal('20000.00'), Decimal('20000.00')) ]</msg>
<status status="PASS" starttime="20230408 10:41:04.273" endtime="20230408 10:41:04.275"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>@{queryResults}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230408 10:41:04.276" level="INFO">('President', Decimal('20000.00'), Decimal('20000.00'))</msg>
<status status="PASS" starttime="20230408 10:41:04.275" endtime="20230408 10:41:04.276"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>@{queryResults}</arg>
<arg>('President', Decimal('20000.00'), Decimal('20000.00'))</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20230408 10:41:04.276" level="INFO">Argument types are:
&lt;class 'pyodbc.Row'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20230408 10:41:04.276" endtime="20230408 10:41:04.276"/>
</kw>
<doc>Find the position with maximum salary range

Expected result:
The result should be title - 'President', min salary - 20000.00, difference -20000.00</doc>
<tag>test_6.Jobs</tag>
<status status="PASS" starttime="20230408 10:41:04.272" endtime="20230408 10:41:04.277"/>
</test>
<test id="s1-t7" name="Table Departments. Verify if the table exist" line="89">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>departments</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20230408 10:41:04.278" level="INFO">Executing : Table Must Exist  |  departments </msg>
<msg timestamp="20230408 10:41:04.278" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='departments' </msg>
<status status="PASS" starttime="20230408 10:41:04.278" endtime="20230408 10:41:04.288"/>
</kw>
<doc>Connect to DB
Check if the table departments exists

Expected results:
Table exists in DB</doc>
<tag>test_7.Departments</tag>
<status status="PASS" starttime="20230408 10:41:04.278" endtime="20230408 10:41:04.289"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20230408 10:41:04.290" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20230408 10:41:04.290" endtime="20230408 10:41:04.291"/>
</kw>
<status status="PASS" starttime="20230408 10:41:04.164" endtime="20230408 10:41:04.291"/>
</suite>
<statistics>
<total>
<stat pass="7" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">test_1.Country</stat>
<stat pass="1" fail="0" skip="0">test_2.Country</stat>
<stat pass="1" fail="0" skip="0">test_3.Employees</stat>
<stat pass="1" fail="0" skip="0">test_4.Employees</stat>
<stat pass="1" fail="0" skip="0">test_5.Jobs</stat>
<stat pass="1" fail="0" skip="0">test_6.Jobs</stat>
<stat pass="1" fail="0" skip="0">test_7.Departments</stat>
</tag>
<suite>
<stat pass="7" fail="0" skip="0" id="s1" name="Task">Task</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
